// <auto-generated />
using System;
using CV_Project_Group2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CV_Project_Group2.Migrations
{
    [DbContext(typeof(CvDbContext))]
    [Migration("20231219103527_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CV_Project_Group2.Models.Address", b =>
                {
                    b.Property<int>("Address_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Address_ID"));

                    b.Property<string>("Address_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Address_Number")
                        .HasColumnType("int");

                    b.Property<string>("Address_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_postcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Address_ID");

                    b.HasIndex("User_ID")
                        .IsUnique()
                        .HasFilter("[User_ID] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.CV", b =>
                {
                    b.Property<int>("Cv_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cv_ID"));

                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Cv_ID");

                    b.HasIndex("User_ID")
                        .IsUnique()
                        .HasFilter("[User_ID] IS NOT NULL");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.CV_Competence", b =>
                {
                    b.Property<int>("Cv_ID")
                        .HasColumnType("int");

                    b.Property<int>("Competence_ID")
                        .HasColumnType("int");

                    b.HasKey("Cv_ID", "Competence_ID");

                    b.HasIndex("Competence_ID");

                    b.ToTable("Cv_Competences");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.CV_Education", b =>
                {
                    b.Property<int>("Cv_ID")
                        .HasColumnType("int");

                    b.Property<int>("Education_ID")
                        .HasColumnType("int");

                    b.HasKey("Cv_ID", "Education_ID");

                    b.HasIndex("Education_ID");

                    b.ToTable("Cv_Education");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.CV_Experience", b =>
                {
                    b.Property<int>("Cv_ID")
                        .HasColumnType("int");

                    b.Property<int>("Experience_ID")
                        .HasColumnType("int");

                    b.HasKey("Cv_ID", "Experience_ID");

                    b.HasIndex("Experience_ID");

                    b.ToTable("Cv_Experiences");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Competence", b =>
                {
                    b.Property<int>("Competence_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Competence_ID"));

                    b.Property<string>("CompetenceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Competence_ID");

                    b.ToTable("Competence");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Education", b =>
                {
                    b.Property<int>("Education_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Education_ID"));

                    b.Property<string>("Education_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Education_ID");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Experience", b =>
                {
                    b.Property<int>("Experience_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Experience_ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Experience_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Start_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Experience_ID");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Message", b =>
                {
                    b.Property<int>("Message_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Message_ID"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Message_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Project", b =>
                {
                    b.Property<int>("Project_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Project_ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageProject")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Project_ID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Login_status")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Private_status")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CV_Project_Group2.Models.User_Project", b =>
                {
                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Project_ID")
                        .HasColumnType("int");

                    b.HasKey("User_ID", "Project_ID");

                    b.HasIndex("Project_ID");

                    b.ToTable("User_Projects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Address", b =>
                {
                    b.HasOne("CV_Project_Group2.Models.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("CV_Project_Group2.Models.Address", "User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.CV", b =>
                {
                    b.HasOne("CV_Project_Group2.Models.User", "User")
                        .WithOne("Cv")
                        .HasForeignKey("CV_Project_Group2.Models.CV", "User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.CV_Competence", b =>
                {
                    b.HasOne("CV_Project_Group2.Models.Competence", "Competence")
                        .WithMany("CV_Competence")
                        .HasForeignKey("Competence_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Project_Group2.Models.CV", "CV")
                        .WithMany("CV_Competence")
                        .HasForeignKey("Cv_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Competence");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.CV_Education", b =>
                {
                    b.HasOne("CV_Project_Group2.Models.CV", "CV")
                        .WithMany("CV_Education")
                        .HasForeignKey("Cv_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Project_Group2.Models.Education", "Education")
                        .WithMany("CV_Education")
                        .HasForeignKey("Education_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Education");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.CV_Experience", b =>
                {
                    b.HasOne("CV_Project_Group2.Models.CV", "CV")
                        .WithMany("CV_Experience")
                        .HasForeignKey("Cv_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Project_Group2.Models.Experience", "Experience")
                        .WithMany("CV_Experience")
                        .HasForeignKey("Experience_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("Experience");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Message", b =>
                {
                    b.HasOne("CV_Project_Group2.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("User_ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.User_Project", b =>
                {
                    b.HasOne("CV_Project_Group2.Models.Project", "Project")
                        .WithMany("User_Projects")
                        .HasForeignKey("Project_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Project_Group2.Models.User", "User")
                        .WithMany("User_Projects")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CV_Project_Group2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CV_Project_Group2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Project_Group2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CV_Project_Group2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CV_Project_Group2.Models.CV", b =>
                {
                    b.Navigation("CV_Competence");

                    b.Navigation("CV_Education");

                    b.Navigation("CV_Experience");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Competence", b =>
                {
                    b.Navigation("CV_Competence");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Education", b =>
                {
                    b.Navigation("CV_Education");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Experience", b =>
                {
                    b.Navigation("CV_Experience");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.Project", b =>
                {
                    b.Navigation("User_Projects");
                });

            modelBuilder.Entity("CV_Project_Group2.Models.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Cv");

                    b.Navigation("Messages");

                    b.Navigation("User_Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
